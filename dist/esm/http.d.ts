import { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
export declare const init: (apiBaseUrl: string, reqInterceptor?: (req: AxiosRequestConfig) => AxiosRequestConfig, respInterceptor?: (res: AxiosResponse) => AxiosResponse, errInterceptor?: (error: AxiosError) => Promise<AxiosError>) => void;
export declare const setAuthHeader: (token: string) => void;
export declare const resetAuthHeader: () => void;
export declare const create: (config?: import("axios").CreateAxiosDefaults<any> | undefined) => import("axios").AxiosInstance;
export declare const all: (iterable: any) => Promise<unknown[]>;
export declare const request: import("axios").AxiosStatic;
export declare const get: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
export declare const post: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
export declare const put: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
export declare const patch: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
export declare const del: <T = any, R = AxiosResponse<T, any>, D = any>(url: string, config?: AxiosRequestConfig<D> | undefined) => Promise<R>;
